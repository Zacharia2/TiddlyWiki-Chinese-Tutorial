created: 20230207162136493
creator: 林一二
modified: 20240327081243784
modifier: 林一二
tags: 太微原理 布局
title: 布局切换
type: text/vnd.tiddlywiki

本文介绍太微里的布局切换功能是如何实现的。

!! 太微核心Wikitext部分

太微大部分界面是用维基文本文式编程写的，可以通过 message 等机制调用 JS 侧的能力，JS 侧也可以通过 `$tw.wiki.`makeTranscludeWidget 等方式取到笔记里的内容。

设计上维基文本是希望成为低代码，不过对普通人来说用起来和 HTML 差不多，不看文档学也不会用，下面简单介绍一下。

页面工具栏上的按钮是这样的：

```
title: $:/core/ui/Buttons/layout
tags: $:/tags/PageControls

<$button tooltip={{$:/language/Buttons/LayoutSwitcher/Hint}}>
  <$action-sendmessage $message="tm-show-switcher" switch="layout"/>
</$button>
```

在一个启动项脚本里，注册了暴露给维基文本的可用消息 `tm-show-switcher`（类似 JSB）

!! 太微核心JS部分

JS 侧收到这个消息后，会弹一个框出来，里面展示笔记条目 `$:/core/ui/SwitcherModal` 的内容

并带上 `{ switch: "layout" }` 作为维基文本变量，传给维基文本侧

```
exports.name = "rootwidget";
exports.platforms = ["browser"];
exports.after = ["startup"];
exports.before = ["story"];
exports.synchronous = true;

// ...

  $tw.rootWidget.addEventListener("tm-show-switcher",function(event) {
    $tw.modal.display("$:/core/ui/SwitcherModal",{variables: event.paramObject, event: event});
  });
```

在维基文本里，可以通过 `<varName>` 的方式把上下文中的变量拼入文本里，总之下面的维基文本拼出了 `$:/config/SwitcherTargets/layout`，取出对应的值 `$:/snippets/LayoutSwitcher`，然后嵌入了这条笔记。

```
title: $:/core/ui/SwitcherModal
subtitle: <$text text={{{[<switch>lookup[$:/language/Switcher/Subtitle/]]}}}/>
class: tc-modal-centered
mask-closable: yes

<$tiddler tiddler={{{ [<switch>lookup[$:/config/SwitcherTargets/] ]}}}>

<$transclude/>

</$tiddler>
```

```
title: $:/config/SwitcherTargets/

layout: $:/snippets/LayoutSwitcher
language: $:/snippets/languageswitcher
palette: $:/core/ui/ControlPanel/Palette
theme: $:/core/ui/ControlPanel/Theme
```

这条笔记是切换视图的弹框，通过 `<$list>` 微件，筛选出带有标签 `$:/tags/Layout` 的笔记，把它们作为链接列在列表里，点了就会把点击的视图笔记的 title 设置到 `$:/layout` 笔记的内容里。

```
title: $:/snippets/LayoutSwitcher

<$linkcatcher to="$:/layout">
  <$list
    filter="[all[tiddlers+shadows]tag[$:/tags/Layout]] +[!is[draft]sort[name]]"
  >
    <$link to={{!!title}}>
      <strong><$transclude field="name"/> </strong><$transclude field="description"/>
    </$link>
  </$list>
</$linkcatcher>
```

最终，太微在根笔记 `$:/core/ui/RootTemplate` 里取出 `$:/layout` 这个笔记的内容，也就是当前打开的视图笔记的 title。

然后就会把我们所选的视图笔记嵌入进来，作为 `$:/core/ui/RootTemplate` 的实际内容。

```
title: $:/core/ui/RootTemplate

<$transclude
  tiddler={{{ [{$:/layout}has[text]] ~[[$:/core/ui/PageTemplate]] }}}
  mode="inline"
/>
```

在 JS 侧挂载这个笔记到 dom 上，类似于 react-dom 挂载 react 组件到 dom 上：

```
const pageWidgetNode = $tw.wiki.makeTranscludeWidget('$:/core/ui/RootTemplate', {
  parentWidget: $tw.rootWidget,
});

const pageContainer = document.createElement('div');
document.body.insertBefore(pageContainer, document.body.firstChild);
$tw.pageWidgetNode.render(pageContainer);
```