class: autonumhead
created: 20230809234409764
creator: WhiteFall
modified: 20230831091619062
modifier: WhiteFall
tags: 插件开发 笔记思维
title: Wiki编程的定义

!! 编程定义 

> "编程"是我们为了完成某项任务，将解决问题的步骤，用计算机能够理解的语言写成指令，这就是"编程"。而后，计算机会根据这些指令一步步执行，最后完成任务。

"编程"涉及到3个组成部分：

# 我们，负责思考解决问题的步骤
# 我们，负责使用计算机能够理解的语言，来描述解决的步骤
# 计算机，负责执行这些步骤

!! Wiki编程定义

什么是Wiki编程？（解释）

TiddlyWiki可以大致分成几个部分wikitext写作，wiki编程、插件开发。tree宏为我们提供了一种Wiki编程参考。编辑器工具栏的文本片段snippet。似乎整个Wiki编程都围绕条目进行操作。

Wiki编程核心是：小工具（Widget）{包含小工具消息（Messages）}、筛选器（Filters）、TiddlyWiki核心变量（被变量包含）等，这些由TiddlyWiki提供的类API的工具或功能集。


小工具消息乃由小工具生成，以回应用户的操作。消息具有一个 name、一个可选的主要 parameter，以及一个或多个可选的命名参数。这些消息沿着小工具树向上传播，在那里它们由上层小工具或核心本身处理。小工具消息通常是触发式的，这意味着常常有一个小工具生成，另一个小工具处理。或者任意方式生成，生成此小工具消息的小工具处理。

机制（Mechanisms）：组成 TiddlyWiki 的内部机制。

级联（Cascades）是用于构建和自定义 TiddlyWiki 用户界面的关键机制。

之所以叫Wiki编程是因为，Wiki编程核心由js实现且降低了复杂度但又和平常的记录笔记相差较大，更类似一种功能实现，即它介于写作与编程语言之间，且偏向编程语言的方面。

!!! TW API & JS API

TW API就是TiddlyWiki提供定义好的微件（也称元素小工具，类似HTML元素）、微件消息（由微件提供）、筛选器、进程（宏，JS宏）、函数、核心变量、变量（$set $let $vars），JS代码定义好的JS模块类型，提供所有功能的全部定义。

JS API就是TiddlyWiki JavaScript源代码级别的编程调用。

!!!! 使用范围

* 微件：wiki
* 微件消息：wiki
* 筛选器：js、wiki
* 进程：wiki
* 函数：wiki
* 核心变量：js、wiki
* JS模块类型：js，wiki

!!! 过程

> 进程（宏）、函数、微件

维基文本解析器模式：为了显示条目（通常是 text 字段），维基文本解析器读取和解释内容，并应用维基文本规则。就是写在条目中笔记。比如你现在看到的内容就是。

解析器有三种模式的其中一种：Pragmas（编译指示）是维基文本 的一个特殊组件，提供对剩余文本解析方式的控制。剩余的两种解析器模式都是笔记的解析渲染和正常显示。

```tw
Pragma: \define
Pragma: \function
Pragma: \import
Pragma: \parameters
Pragma: \procedure
Pragma: \rules
Pragma: \whitespace
Pragma: \widget
```

你可以自己定义方法（动作）在TiddlyWiki中叫作进程或宏，推荐使用进程（Procedures），它可以接受参数，不同位置，变量是引用方式不一样。你可以使用小工具定义变量。也可以在某个小工具添加属性导出变量。在方法体中，你可以使用小工具、筛选器、小工具消息、变量进行一系列动作。

筛选器作用于所有条目的所有字段，它是对条目字段进行操作的方法。或者说访问并操作所有条目字段数据的函数。TiddlyWiki提供一种方法，查找哪些条目符合给定的模型。条目或数据条目作为原始数据集，函数、筛选器作为原始数据集的函数处理和筛选工具。

定义函数，函数在TiddlyWiki中被定义为包含筛选器表达式的命名文本片段。函数可以具有命名参数，这些参数在函数内当作变量使用。感觉基本上是操作条目的各个字段，对字段内容进行增查删改。然后输出一组内容，表现形式为编程语言中的列表类型。

!!! 变量

变量的定义（待修改）：变量是一个文本片段，可以通过名称访问。该文本称为变量的值。变量由小工具定义。几个内核小工具定义了变量，最常见的是 $set、$let 和 $list 小工具。

# 过程的参数
# 进程（宏）
# 变量微件（$set、$let、$vars）
# 函数
# 核心变量

“TiddlyWiki核心变量”，这些变量是由TiddlyWiki提供好的，具有特殊功能，可以直接引用的。比如currentTiddler核心变量：`<$view tiddler=<<currentTiddler>> field=title/>`。

!!! 定义

# 可以作为变量的过程定义：进程（宏、JS宏）、微件、函数；
# 变量定义：$set、$let、$vars、核心变量；
# JS模块类型定义：包括所有TW API。例如：JS宏、微件、筛选器、通用模块等等

JS模块类型：一个 模块 是包含可运行 JavaScript 的条目。可以用js定义小工具，筛选器，解析器，通用模块、JS宏等等。具体查看模块类型。

> https://bramchen.github.io/tw5-docs/zh-Hans/#Variable%20Usage 

* [[定义微件和微件参数]]

!!! 调用

可以使用的调用：

# 对条目与数据条目进行函数访问的筛选器
# TW提供的或定义的过程（进程（宏）、微件、函数、小工具、小工具消息）和变量。

!!! 逻辑

!!! 视图


TiddlyWiki 的显示是由一些底层的小工具驱动。这些小工具都组织成树状结构。小工具树是后续化为实际显示的中间表示。每个小工具的类别贡献一个特定功能，就像调用API一样。小工具提供 WikiText 更丰富的功能。它们与 HTML 元素 使用相同的标记方式，但是标记的名称前包含一个 $ 符号。小工具的属性因使用情景不同而被指定为多种不同形式。小工具是开始字符带有$符号，类似[[HTML|https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/HTML_basics]]文档中的元素标记，如`<$let><$let>`，使用这种标记生成专用的元素小工具。

> 现在，它不再使用 jQuery 和 DOM，而是将维基文本wikitext解析为通用的树形格式，然后将其渲染为文本 HTML。——TiddlyWiki5的诞生！

元素微件通常由 标记（tag）、属性（Attribute）、内容（Content）组成。可以将一个元素置于其他元素之中 —— 称作嵌套。通过指定标记和属性完成微件的方法调用，根据微件行为定义生成行为效果，若有返回值则并将返回值作用或传递到内容中，但微件内容也可以作为一种数据输入，由微件进行处理。

```xml
<$set name="greeting" value="Hi">
	<$set name="me" value={{!!title}}>
		<$set name="sentence" value="helloworld" >
			<<greeting>>! I am <<me>> and I say: <<sentence>>
		</$set>
	</$set>
</$set>
```

!!! 调试

action-log、log小工具、[[调试筛选器]]

